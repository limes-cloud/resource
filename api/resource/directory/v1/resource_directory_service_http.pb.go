// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/resource/directory/resource_directory_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDirectoryCreateDirectory = "/resource.api.resource.directory.v1.Directory/CreateDirectory"
const OperationDirectoryDeleteDirectory = "/resource.api.resource.directory.v1.Directory/DeleteDirectory"
const OperationDirectoryGetDirectory = "/resource.api.resource.directory.v1.Directory/GetDirectory"
const OperationDirectoryListDirectory = "/resource.api.resource.directory.v1.Directory/ListDirectory"
const OperationDirectoryUpdateDirectory = "/resource.api.resource.directory.v1.Directory/UpdateDirectory"

type DirectoryHTTPServer interface {
	// CreateDirectory CreateDirectory 创建文件目录信息
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryReply, error)
	// DeleteDirectory DeleteDirectory 删除文件目录信息
	DeleteDirectory(context.Context, *DeleteDirectoryRequest) (*DeleteDirectoryReply, error)
	// GetDirectory GetDirectory 获取指定的文件目录信息
	GetDirectory(context.Context, *GetDirectoryRequest) (*GetDirectoryReply, error)
	// ListDirectory ListDirectory 获取文件目录信息列表
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryReply, error)
	// UpdateDirectory UpdateDirectory 更新文件目录信息
	UpdateDirectory(context.Context, *UpdateDirectoryRequest) (*UpdateDirectoryReply, error)
}

func RegisterDirectoryHTTPServer(s *http.Server, srv DirectoryHTTPServer) {
	r := s.Route("/")
	r.GET("/resource/api/v1/directory", _Directory_GetDirectory0_HTTP_Handler(srv))
	r.GET("/resource/api/v1/directories", _Directory_ListDirectory0_HTTP_Handler(srv))
	r.POST("/resource/api/v1/directory", _Directory_CreateDirectory0_HTTP_Handler(srv))
	r.PUT("/resource/api/v1/directory", _Directory_UpdateDirectory0_HTTP_Handler(srv))
	r.DELETE("/resource/api/v1/directory", _Directory_DeleteDirectory0_HTTP_Handler(srv))
}

func _Directory_GetDirectory0_HTTP_Handler(srv DirectoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDirectoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDirectoryGetDirectory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetDirectory(ctx, req.(*GetDirectoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDirectoryReply)
		return ctx.Result(200, reply)
	}
}

func _Directory_ListDirectory0_HTTP_Handler(srv DirectoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDirectoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDirectoryListDirectory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListDirectory(ctx, req.(*ListDirectoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDirectoryReply)
		return ctx.Result(200, reply)
	}
}

func _Directory_CreateDirectory0_HTTP_Handler(srv DirectoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDirectoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDirectoryCreateDirectory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateDirectory(ctx, req.(*CreateDirectoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDirectoryReply)
		return ctx.Result(200, reply)
	}
}

func _Directory_UpdateDirectory0_HTTP_Handler(srv DirectoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDirectoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDirectoryUpdateDirectory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDirectory(ctx, req.(*UpdateDirectoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDirectoryReply)
		return ctx.Result(200, reply)
	}
}

func _Directory_DeleteDirectory0_HTTP_Handler(srv DirectoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDirectoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDirectoryDeleteDirectory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDirectory(ctx, req.(*DeleteDirectoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDirectoryReply)
		return ctx.Result(200, reply)
	}
}

type DirectoryHTTPClient interface {
	CreateDirectory(ctx context.Context, req *CreateDirectoryRequest, opts ...http.CallOption) (rsp *CreateDirectoryReply, err error)
	DeleteDirectory(ctx context.Context, req *DeleteDirectoryRequest, opts ...http.CallOption) (rsp *DeleteDirectoryReply, err error)
	GetDirectory(ctx context.Context, req *GetDirectoryRequest, opts ...http.CallOption) (rsp *GetDirectoryReply, err error)
	ListDirectory(ctx context.Context, req *ListDirectoryRequest, opts ...http.CallOption) (rsp *ListDirectoryReply, err error)
	UpdateDirectory(ctx context.Context, req *UpdateDirectoryRequest, opts ...http.CallOption) (rsp *UpdateDirectoryReply, err error)
}

type DirectoryHTTPClientImpl struct {
	cc *http.Client
}

func NewDirectoryHTTPClient(client *http.Client) DirectoryHTTPClient {
	return &DirectoryHTTPClientImpl{client}
}

func (c *DirectoryHTTPClientImpl) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...http.CallOption) (*CreateDirectoryReply, error) {
	var out CreateDirectoryReply
	pattern := "/resource/api/v1/directory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDirectoryCreateDirectory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DirectoryHTTPClientImpl) DeleteDirectory(ctx context.Context, in *DeleteDirectoryRequest, opts ...http.CallOption) (*DeleteDirectoryReply, error) {
	var out DeleteDirectoryReply
	pattern := "/resource/api/v1/directory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDirectoryDeleteDirectory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DirectoryHTTPClientImpl) GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...http.CallOption) (*GetDirectoryReply, error) {
	var out GetDirectoryReply
	pattern := "/resource/api/v1/directory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDirectoryGetDirectory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DirectoryHTTPClientImpl) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...http.CallOption) (*ListDirectoryReply, error) {
	var out ListDirectoryReply
	pattern := "/resource/api/v1/directories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDirectoryListDirectory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DirectoryHTTPClientImpl) UpdateDirectory(ctx context.Context, in *UpdateDirectoryRequest, opts ...http.CallOption) (*UpdateDirectoryReply, error) {
	var out UpdateDirectoryReply
	pattern := "/resource/api/v1/directory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDirectoryUpdateDirectory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
