// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/resource/directory/resource_directory.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDirectoryRequestMultiError, or nil if none found.
func (m *GetDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDirectoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDirectoryRequestMultiError(errors)
	}

	return nil
}

// GetDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirectoryRequestMultiError) AllErrors() []error { return m }

// GetDirectoryRequestValidationError is the validation error returned by
// GetDirectoryRequest.Validate if the designated constraints aren't met.
type GetDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirectoryRequestValidationError) ErrorName() string {
	return "GetDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirectoryRequestValidationError{}

// Validate checks the field values on GetDirectoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDirectoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDirectoryReplyMultiError, or nil if none found.
func (m *GetDirectoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirectoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Accept

	// no validation rules for MaxSize

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetDirectoryReplyMultiError(errors)
	}

	return nil
}

// GetDirectoryReplyMultiError is an error wrapping multiple validation errors
// returned by GetDirectoryReply.ValidateAll() if the designated constraints
// aren't met.
type GetDirectoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirectoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirectoryReplyMultiError) AllErrors() []error { return m }

// GetDirectoryReplyValidationError is the validation error returned by
// GetDirectoryReply.Validate if the designated constraints aren't met.
type GetDirectoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirectoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirectoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirectoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirectoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirectoryReplyValidationError) ErrorName() string {
	return "GetDirectoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDirectoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirectoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirectoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirectoryReplyValidationError{}

// Validate checks the field values on ListDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDirectoryRequestMultiError, or nil if none found.
func (m *ListDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Order != nil {

		if _, ok := _ListDirectoryRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListDirectoryRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListDirectoryRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListDirectoryRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListDirectoryRequestMultiError(errors)
	}

	return nil
}

// ListDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirectoryRequestMultiError) AllErrors() []error { return m }

// ListDirectoryRequestValidationError is the validation error returned by
// ListDirectoryRequest.Validate if the designated constraints aren't met.
type ListDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirectoryRequestValidationError) ErrorName() string {
	return "ListDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirectoryRequestValidationError{}

var _ListDirectoryRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListDirectoryRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDirectoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDirectoryReplyMultiError, or nil if none found.
func (m *ListDirectoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirectoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDirectoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDirectoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirectoryReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDirectoryReplyMultiError(errors)
	}

	return nil
}

// ListDirectoryReplyMultiError is an error wrapping multiple validation errors
// returned by ListDirectoryReply.ValidateAll() if the designated constraints
// aren't met.
type ListDirectoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirectoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirectoryReplyMultiError) AllErrors() []error { return m }

// ListDirectoryReplyValidationError is the validation error returned by
// ListDirectoryReply.Validate if the designated constraints aren't met.
type ListDirectoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirectoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirectoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirectoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirectoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirectoryReplyValidationError) ErrorName() string {
	return "ListDirectoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDirectoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirectoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirectoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirectoryReplyValidationError{}

// Validate checks the field values on CreateDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDirectoryRequestMultiError, or nil if none found.
func (m *CreateDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParentId() < 0 {
		err := CreateDirectoryRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateDirectoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccept()) < 1 {
		err := CreateDirectoryRequestValidationError{
			field:  "Accept",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxSize() < 1 {
		err := CreateDirectoryRequestValidationError{
			field:  "MaxSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDirectoryRequestMultiError(errors)
	}

	return nil
}

// CreateDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDirectoryRequestMultiError) AllErrors() []error { return m }

// CreateDirectoryRequestValidationError is the validation error returned by
// CreateDirectoryRequest.Validate if the designated constraints aren't met.
type CreateDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDirectoryRequestValidationError) ErrorName() string {
	return "CreateDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDirectoryRequestValidationError{}

// Validate checks the field values on CreateDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDirectoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDirectoryReplyMultiError, or nil if none found.
func (m *CreateDirectoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDirectoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDirectoryReplyMultiError(errors)
	}

	return nil
}

// CreateDirectoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDirectoryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDirectoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDirectoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDirectoryReplyMultiError) AllErrors() []error { return m }

// CreateDirectoryReplyValidationError is the validation error returned by
// CreateDirectoryReply.Validate if the designated constraints aren't met.
type CreateDirectoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDirectoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDirectoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDirectoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDirectoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDirectoryReplyValidationError) ErrorName() string {
	return "CreateDirectoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDirectoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDirectoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDirectoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDirectoryReplyValidationError{}

// Validate checks the field values on UpdateDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDirectoryRequestMultiError, or nil if none found.
func (m *UpdateDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDirectoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 0 {
		err := UpdateDirectoryRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDirectoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccept()) < 1 {
		err := UpdateDirectoryRequestValidationError{
			field:  "Accept",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxSize() < 1 {
		err := UpdateDirectoryRequestValidationError{
			field:  "MaxSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDirectoryRequestMultiError(errors)
	}

	return nil
}

// UpdateDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDirectoryRequestMultiError) AllErrors() []error { return m }

// UpdateDirectoryRequestValidationError is the validation error returned by
// UpdateDirectoryRequest.Validate if the designated constraints aren't met.
type UpdateDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDirectoryRequestValidationError) ErrorName() string {
	return "UpdateDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDirectoryRequestValidationError{}

// Validate checks the field values on UpdateDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDirectoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDirectoryReplyMultiError, or nil if none found.
func (m *UpdateDirectoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDirectoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDirectoryReplyMultiError(errors)
	}

	return nil
}

// UpdateDirectoryReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDirectoryReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDirectoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDirectoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDirectoryReplyMultiError) AllErrors() []error { return m }

// UpdateDirectoryReplyValidationError is the validation error returned by
// UpdateDirectoryReply.Validate if the designated constraints aren't met.
type UpdateDirectoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDirectoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDirectoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDirectoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDirectoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDirectoryReplyValidationError) ErrorName() string {
	return "UpdateDirectoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDirectoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDirectoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDirectoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDirectoryReplyValidationError{}

// Validate checks the field values on DeleteDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDirectoryRequestMultiError, or nil if none found.
func (m *DeleteDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteDirectoryRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteDirectoryRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteDirectoryRequest_Ids_Unique[item]; exists {
			err := DeleteDirectoryRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteDirectoryRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteDirectoryRequestMultiError(errors)
	}

	return nil
}

// DeleteDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDirectoryRequestMultiError) AllErrors() []error { return m }

// DeleteDirectoryRequestValidationError is the validation error returned by
// DeleteDirectoryRequest.Validate if the designated constraints aren't met.
type DeleteDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDirectoryRequestValidationError) ErrorName() string {
	return "DeleteDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDirectoryRequestValidationError{}

// Validate checks the field values on DeleteDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDirectoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDirectoryReplyMultiError, or nil if none found.
func (m *DeleteDirectoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDirectoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteDirectoryReplyMultiError(errors)
	}

	return nil
}

// DeleteDirectoryReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDirectoryReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDirectoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDirectoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDirectoryReplyMultiError) AllErrors() []error { return m }

// DeleteDirectoryReplyValidationError is the validation error returned by
// DeleteDirectoryReply.Validate if the designated constraints aren't met.
type DeleteDirectoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDirectoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDirectoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDirectoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDirectoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDirectoryReplyValidationError) ErrorName() string {
	return "DeleteDirectoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDirectoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDirectoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDirectoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDirectoryReplyValidationError{}

// Validate checks the field values on ListDirectoryReply_Directory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDirectoryReply_Directory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirectoryReply_Directory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDirectoryReply_DirectoryMultiError, or nil if none found.
func (m *ListDirectoryReply_Directory) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirectoryReply_Directory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Accept

	// no validation rules for MaxSize

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDirectoryReply_DirectoryValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDirectoryReply_DirectoryValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirectoryReply_DirectoryValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDirectoryReply_DirectoryMultiError(errors)
	}

	return nil
}

// ListDirectoryReply_DirectoryMultiError is an error wrapping multiple
// validation errors returned by ListDirectoryReply_Directory.ValidateAll() if
// the designated constraints aren't met.
type ListDirectoryReply_DirectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirectoryReply_DirectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirectoryReply_DirectoryMultiError) AllErrors() []error { return m }

// ListDirectoryReply_DirectoryValidationError is the validation error returned
// by ListDirectoryReply_Directory.Validate if the designated constraints
// aren't met.
type ListDirectoryReply_DirectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirectoryReply_DirectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirectoryReply_DirectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirectoryReply_DirectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirectoryReply_DirectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirectoryReply_DirectoryValidationError) ErrorName() string {
	return "ListDirectoryReply_DirectoryValidationError"
}

// Error satisfies the builtin error interface
func (e ListDirectoryReply_DirectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirectoryReply_Directory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirectoryReply_DirectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirectoryReply_DirectoryValidationError{}
