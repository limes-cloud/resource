// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/resource/export/resource_export_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationExportCreateExport = "/resource.api.resource.export.v1.Export/CreateExport"
const OperationExportDeleteExport = "/resource.api.resource.export.v1.Export/DeleteExport"
const OperationExportListExport = "/resource.api.resource.export.v1.Export/ListExport"

type ExportHTTPServer interface {
	// CreateExport CreateExport 创建导出信息
	CreateExport(context.Context, *CreateExportRequest) (*CreateExportReply, error)
	// DeleteExport DeleteExport 删除导出信息
	DeleteExport(context.Context, *DeleteExportRequest) (*DeleteExportReply, error)
	// ListExport ListExport 获取导出信息列表
	ListExport(context.Context, *ListExportRequest) (*ListExportReply, error)
}

func RegisterExportHTTPServer(s *http.Server, srv ExportHTTPServer) {
	r := s.Route("/")
	r.GET("/resource/api/v1/exports", _Export_ListExport0_HTTP_Handler(srv))
	r.POST("/resource/api/v1/export", _Export_CreateExport0_HTTP_Handler(srv))
	r.DELETE("/resource/api/v1/export", _Export_DeleteExport0_HTTP_Handler(srv))
}

func _Export_ListExport0_HTTP_Handler(srv ExportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExportRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExportListExport)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListExport(ctx, req.(*ListExportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListExportReply)
		return ctx.Result(200, reply)
	}
}

func _Export_CreateExport0_HTTP_Handler(srv ExportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateExportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExportCreateExport)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateExport(ctx, req.(*CreateExportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateExportReply)
		return ctx.Result(200, reply)
	}
}

func _Export_DeleteExport0_HTTP_Handler(srv ExportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExportRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExportDeleteExport)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteExport(ctx, req.(*DeleteExportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteExportReply)
		return ctx.Result(200, reply)
	}
}

type ExportHTTPClient interface {
	CreateExport(ctx context.Context, req *CreateExportRequest, opts ...http.CallOption) (rsp *CreateExportReply, err error)
	DeleteExport(ctx context.Context, req *DeleteExportRequest, opts ...http.CallOption) (rsp *DeleteExportReply, err error)
	ListExport(ctx context.Context, req *ListExportRequest, opts ...http.CallOption) (rsp *ListExportReply, err error)
}

type ExportHTTPClientImpl struct {
	cc *http.Client
}

func NewExportHTTPClient(client *http.Client) ExportHTTPClient {
	return &ExportHTTPClientImpl{client}
}

func (c *ExportHTTPClientImpl) CreateExport(ctx context.Context, in *CreateExportRequest, opts ...http.CallOption) (*CreateExportReply, error) {
	var out CreateExportReply
	pattern := "/resource/api/v1/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExportCreateExport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ExportHTTPClientImpl) DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...http.CallOption) (*DeleteExportReply, error) {
	var out DeleteExportReply
	pattern := "/resource/api/v1/export"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationExportDeleteExport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ExportHTTPClientImpl) ListExport(ctx context.Context, in *ListExportRequest, opts ...http.CallOption) (*ListExportReply, error) {
	var out ListExportReply
	pattern := "/resource/api/v1/exports"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationExportListExport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
