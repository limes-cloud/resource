// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/resource/export/resource_export.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListExportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExportRequestMultiError, or nil if none found.
func (m *ListExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListExportRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListExportRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListExportRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListExportRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListExportRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListExportRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.DepartmentId != nil {
		// no validation rules for DepartmentId
	}

	if len(errors) > 0 {
		return ListExportRequestMultiError(errors)
	}

	return nil
}

// ListExportRequestMultiError is an error wrapping multiple validation errors
// returned by ListExportRequest.ValidateAll() if the designated constraints
// aren't met.
type ListExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExportRequestMultiError) AllErrors() []error { return m }

// ListExportRequestValidationError is the validation error returned by
// ListExportRequest.Validate if the designated constraints aren't met.
type ListExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExportRequestValidationError) ErrorName() string {
	return "ListExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExportRequestValidationError{}

var _ListExportRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListExportRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListExportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListExportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExportReplyMultiError, or nil if none found.
func (m *ListExportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListExportReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListExportReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListExportReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListExportReplyMultiError(errors)
	}

	return nil
}

// ListExportReplyMultiError is an error wrapping multiple validation errors
// returned by ListExportReply.ValidateAll() if the designated constraints
// aren't met.
type ListExportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExportReplyMultiError) AllErrors() []error { return m }

// ListExportReplyValidationError is the validation error returned by
// ListExportReply.Validate if the designated constraints aren't met.
type ListExportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExportReplyValidationError) ErrorName() string { return "ListExportReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListExportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExportReplyValidationError{}

// Validate checks the field values on CreateExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExportRequestMultiError, or nil if none found.
func (m *CreateExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateExportRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDepartmentId() <= 0 {
		err := CreateExportRequestValidationError{
			field:  "DepartmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScene()) < 1 {
		err := CreateExportRequestValidationError{
			field:  "Scene",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateExportRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if len(errors) > 0 {
		return CreateExportRequestMultiError(errors)
	}

	return nil
}

// CreateExportRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExportRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExportRequestMultiError) AllErrors() []error { return m }

// CreateExportRequestValidationError is the validation error returned by
// CreateExportRequest.Validate if the designated constraints aren't met.
type CreateExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExportRequestValidationError) ErrorName() string {
	return "CreateExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExportRequestValidationError{}

// Validate checks the field values on CreateExportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateExportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExportReplyMultiError, or nil if none found.
func (m *CreateExportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateExportReplyMultiError(errors)
	}

	return nil
}

// CreateExportReplyMultiError is an error wrapping multiple validation errors
// returned by CreateExportReply.ValidateAll() if the designated constraints
// aren't met.
type CreateExportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExportReplyMultiError) AllErrors() []error { return m }

// CreateExportReplyValidationError is the validation error returned by
// CreateExportReply.Validate if the designated constraints aren't met.
type CreateExportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExportReplyValidationError) ErrorName() string {
	return "CreateExportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExportReplyValidationError{}

// Validate checks the field values on DeleteExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExportRequestMultiError, or nil if none found.
func (m *DeleteExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteExportRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteExportRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteExportRequest_Ids_Unique[item]; exists {
			err := DeleteExportRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteExportRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteExportRequestMultiError(errors)
	}

	return nil
}

// DeleteExportRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteExportRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExportRequestMultiError) AllErrors() []error { return m }

// DeleteExportRequestValidationError is the validation error returned by
// DeleteExportRequest.Validate if the designated constraints aren't met.
type DeleteExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExportRequestValidationError) ErrorName() string {
	return "DeleteExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExportRequestValidationError{}

// Validate checks the field values on DeleteExportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteExportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExportReplyMultiError, or nil if none found.
func (m *DeleteExportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteExportReplyMultiError(errors)
	}

	return nil
}

// DeleteExportReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteExportReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteExportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExportReplyMultiError) AllErrors() []error { return m }

// DeleteExportReplyValidationError is the validation error returned by
// DeleteExportReply.Validate if the designated constraints aren't met.
type DeleteExportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExportReplyValidationError) ErrorName() string {
	return "DeleteExportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExportReplyValidationError{}

// Validate checks the field values on ListExportReply_Export with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExportReply_Export) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExportReply_Export with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExportReply_ExportMultiError, or nil if none found.
func (m *ListExportReply_Export) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExportReply_Export) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for DepartmentId

	// no validation rules for Scene

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Status

	// no validation rules for ExpiredAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Sha != nil {
		// no validation rules for Sha
	}

	if m.Src != nil {
		// no validation rules for Src
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if len(errors) > 0 {
		return ListExportReply_ExportMultiError(errors)
	}

	return nil
}

// ListExportReply_ExportMultiError is an error wrapping multiple validation
// errors returned by ListExportReply_Export.ValidateAll() if the designated
// constraints aren't met.
type ListExportReply_ExportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExportReply_ExportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExportReply_ExportMultiError) AllErrors() []error { return m }

// ListExportReply_ExportValidationError is the validation error returned by
// ListExportReply_Export.Validate if the designated constraints aren't met.
type ListExportReply_ExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExportReply_ExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExportReply_ExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExportReply_ExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExportReply_ExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExportReply_ExportValidationError) ErrorName() string {
	return "ListExportReply_ExportValidationError"
}

// Error satisfies the builtin error interface
func (e ListExportReply_ExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExportReply_Export.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExportReply_ExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExportReply_ExportValidationError{}
