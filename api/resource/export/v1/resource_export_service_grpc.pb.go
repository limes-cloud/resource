// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/resource/export/resource_export_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Export_GetExport_FullMethodName    = "/resource.api.resource.export.v1.Export/GetExport"
	Export_ListExport_FullMethodName   = "/resource.api.resource.export.v1.Export/ListExport"
	Export_ExportFile_FullMethodName   = "/resource.api.resource.export.v1.Export/ExportFile"
	Export_ExportExcel_FullMethodName  = "/resource.api.resource.export.v1.Export/ExportExcel"
	Export_DeleteExport_FullMethodName = "/resource.api.resource.export.v1.Export/DeleteExport"
)

// ExportClient is the client API for Export service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportClient interface {
	// GetExport 获取指定的导出信息
	GetExport(ctx context.Context, in *GetExportRequest, opts ...grpc.CallOption) (*GetExportReply, error)
	// ListExport 获取导出信息列表
	ListExport(ctx context.Context, in *ListExportRequest, opts ...grpc.CallOption) (*ListExportReply, error)
	// ExportFile 创建导出信息
	ExportFile(ctx context.Context, in *ExportFileRequest, opts ...grpc.CallOption) (*ExportFileReply, error)
	// ExportExcel 创建导出表格信息
	ExportExcel(ctx context.Context, in *ExportExcelRequest, opts ...grpc.CallOption) (*ExportExcelReply, error)
	// DeleteExport 删除导出信息
	DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...grpc.CallOption) (*DeleteExportReply, error)
}

type exportClient struct {
	cc grpc.ClientConnInterface
}

func NewExportClient(cc grpc.ClientConnInterface) ExportClient {
	return &exportClient{cc}
}

func (c *exportClient) GetExport(ctx context.Context, in *GetExportRequest, opts ...grpc.CallOption) (*GetExportReply, error) {
	out := new(GetExportReply)
	err := c.cc.Invoke(ctx, Export_GetExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportClient) ListExport(ctx context.Context, in *ListExportRequest, opts ...grpc.CallOption) (*ListExportReply, error) {
	out := new(ListExportReply)
	err := c.cc.Invoke(ctx, Export_ListExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportClient) ExportFile(ctx context.Context, in *ExportFileRequest, opts ...grpc.CallOption) (*ExportFileReply, error) {
	out := new(ExportFileReply)
	err := c.cc.Invoke(ctx, Export_ExportFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportClient) ExportExcel(ctx context.Context, in *ExportExcelRequest, opts ...grpc.CallOption) (*ExportExcelReply, error) {
	out := new(ExportExcelReply)
	err := c.cc.Invoke(ctx, Export_ExportExcel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportClient) DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...grpc.CallOption) (*DeleteExportReply, error) {
	out := new(DeleteExportReply)
	err := c.cc.Invoke(ctx, Export_DeleteExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportServer is the server API for Export service.
// All implementations must embed UnimplementedExportServer
// for forward compatibility
type ExportServer interface {
	// GetExport 获取指定的导出信息
	GetExport(context.Context, *GetExportRequest) (*GetExportReply, error)
	// ListExport 获取导出信息列表
	ListExport(context.Context, *ListExportRequest) (*ListExportReply, error)
	// ExportFile 创建导出信息
	ExportFile(context.Context, *ExportFileRequest) (*ExportFileReply, error)
	// ExportExcel 创建导出表格信息
	ExportExcel(context.Context, *ExportExcelRequest) (*ExportExcelReply, error)
	// DeleteExport 删除导出信息
	DeleteExport(context.Context, *DeleteExportRequest) (*DeleteExportReply, error)
	mustEmbedUnimplementedExportServer()
}

// UnimplementedExportServer must be embedded to have forward compatible implementations.
type UnimplementedExportServer struct {
}

func (UnimplementedExportServer) GetExport(context.Context, *GetExportRequest) (*GetExportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExport not implemented")
}
func (UnimplementedExportServer) ListExport(context.Context, *ListExportRequest) (*ListExportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExport not implemented")
}
func (UnimplementedExportServer) ExportFile(context.Context, *ExportFileRequest) (*ExportFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportFile not implemented")
}
func (UnimplementedExportServer) ExportExcel(context.Context, *ExportExcelRequest) (*ExportExcelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportExcel not implemented")
}
func (UnimplementedExportServer) DeleteExport(context.Context, *DeleteExportRequest) (*DeleteExportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExport not implemented")
}
func (UnimplementedExportServer) mustEmbedUnimplementedExportServer() {}

// UnsafeExportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportServer will
// result in compilation errors.
type UnsafeExportServer interface {
	mustEmbedUnimplementedExportServer()
}

func RegisterExportServer(s grpc.ServiceRegistrar, srv ExportServer) {
	s.RegisterService(&Export_ServiceDesc, srv)
}

func _Export_GetExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServer).GetExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Export_GetExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServer).GetExport(ctx, req.(*GetExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Export_ListExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServer).ListExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Export_ListExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServer).ListExport(ctx, req.(*ListExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Export_ExportFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServer).ExportFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Export_ExportFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServer).ExportFile(ctx, req.(*ExportFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Export_ExportExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportExcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServer).ExportExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Export_ExportExcel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServer).ExportExcel(ctx, req.(*ExportExcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Export_DeleteExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServer).DeleteExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Export_DeleteExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServer).DeleteExport(ctx, req.(*DeleteExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Export_ServiceDesc is the grpc.ServiceDesc for Export service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Export_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.api.resource.export.v1.Export",
	HandlerType: (*ExportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExport",
			Handler:    _Export_GetExport_Handler,
		},
		{
			MethodName: "ListExport",
			Handler:    _Export_ListExport_Handler,
		},
		{
			MethodName: "ExportFile",
			Handler:    _Export_ExportFile_Handler,
		},
		{
			MethodName: "ExportExcel",
			Handler:    _Export_ExportExcel_Handler,
		},
		{
			MethodName: "DeleteExport",
			Handler:    _Export_DeleteExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/resource/export/resource_export_service.proto",
}
