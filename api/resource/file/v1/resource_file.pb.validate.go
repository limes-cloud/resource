// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/resource/file/resource_file.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StaticFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StaticFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaticFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StaticFileRequestMultiError, or nil if none found.
func (m *StaticFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StaticFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSrc()) < 1 {
		err := StaticFileRequestValidationError{
			field:  "Src",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpire()) < 1 {
		err := StaticFileRequestValidationError{
			field:  "Expire",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSign()) < 1 {
		err := StaticFileRequestValidationError{
			field:  "Sign",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Mode

	// no validation rules for Download

	// no validation rules for SaveName

	if len(errors) > 0 {
		return StaticFileRequestMultiError(errors)
	}

	return nil
}

// StaticFileRequestMultiError is an error wrapping multiple validation errors
// returned by StaticFileRequest.ValidateAll() if the designated constraints
// aren't met.
type StaticFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaticFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaticFileRequestMultiError) AllErrors() []error { return m }

// StaticFileRequestValidationError is the validation error returned by
// StaticFileRequest.Validate if the designated constraints aren't met.
type StaticFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaticFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaticFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaticFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaticFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaticFileRequestValidationError) ErrorName() string {
	return "StaticFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StaticFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaticFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaticFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaticFileRequestValidationError{}

// Validate checks the field values on StaticFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StaticFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaticFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StaticFileReplyMultiError, or nil if none found.
func (m *StaticFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StaticFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Mime

	if len(errors) > 0 {
		return StaticFileReplyMultiError(errors)
	}

	return nil
}

// StaticFileReplyMultiError is an error wrapping multiple validation errors
// returned by StaticFileReply.ValidateAll() if the designated constraints
// aren't met.
type StaticFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaticFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaticFileReplyMultiError) AllErrors() []error { return m }

// StaticFileReplyValidationError is the validation error returned by
// StaticFileReply.Validate if the designated constraints aren't met.
type StaticFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaticFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaticFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaticFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaticFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaticFileReplyValidationError) ErrorName() string { return "StaticFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e StaticFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaticFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaticFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaticFileReplyValidationError{}

// Validate checks the field values on DownloadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadFileRequestMultiError, or nil if none found.
func (m *DownloadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSrc()) < 1 {
		err := DownloadFileRequestValidationError{
			field:  "Src",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpire()) < 1 {
		err := DownloadFileRequestValidationError{
			field:  "Expire",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSign()) < 1 {
		err := DownloadFileRequestValidationError{
			field:  "Sign",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SaveName

	if len(errors) > 0 {
		return DownloadFileRequestMultiError(errors)
	}

	return nil
}

// DownloadFileRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadFileRequest.ValidateAll() if the designated
// constraints aren't met.
type DownloadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadFileRequestMultiError) AllErrors() []error { return m }

// DownloadFileRequestValidationError is the validation error returned by
// DownloadFileRequest.Validate if the designated constraints aren't met.
type DownloadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadFileRequestValidationError) ErrorName() string {
	return "DownloadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadFileRequestValidationError{}

// Validate checks the field values on DownloadFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DownloadFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadFileReplyMultiError, or nil if none found.
func (m *DownloadFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Mime

	if len(errors) > 0 {
		return DownloadFileReplyMultiError(errors)
	}

	return nil
}

// DownloadFileReplyMultiError is an error wrapping multiple validation errors
// returned by DownloadFileReply.ValidateAll() if the designated constraints
// aren't met.
type DownloadFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadFileReplyMultiError) AllErrors() []error { return m }

// DownloadFileReplyValidationError is the validation error returned by
// DownloadFileReply.Validate if the designated constraints aren't met.
type DownloadFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadFileReplyValidationError) ErrorName() string {
	return "DownloadFileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadFileReplyValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := GetFileRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sha != nil {

		if utf8.RuneCountInString(m.GetSha()) < 1 {
			err := GetFileRequestValidationError{
				field:  "Sha",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Src != nil {

		if utf8.RuneCountInString(m.GetSrc()) < 1 {
			err := GetFileRequestValidationError{
				field:  "Src",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileReplyMultiError, or
// nil if none found.
func (m *GetFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DirectoryId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Size

	// no validation rules for Sha

	// no validation rules for Src

	// no validation rules for Url

	// no validation rules for Status

	// no validation rules for UploadId

	// no validation rules for ChunkCount

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetFileReplyMultiError(errors)
	}

	return nil
}

// GetFileReplyMultiError is an error wrapping multiple validation errors
// returned by GetFileReply.ValidateAll() if the designated constraints aren't met.
type GetFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileReplyMultiError) AllErrors() []error { return m }

// GetFileReplyValidationError is the validation error returned by
// GetFileReply.Validate if the designated constraints aren't met.
type GetFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileReplyValidationError) ErrorName() string { return "GetFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileReplyValidationError{}

// Validate checks the field values on ListFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileRequestMultiError, or nil if none found.
func (m *ListFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListFileRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListFileRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListFileRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListFileRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListFileRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListFileRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DirectoryId != nil {
		// no validation rules for DirectoryId
	}

	if m.Status != nil {

		if _, ok := _ListFileRequest_Status_InLookup[m.GetStatus()]; !ok {
			err := ListFileRequestValidationError{
				field:  "Status",
				reason: "value must be in list [PROGRESS COMPLETED]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListFileRequestMultiError(errors)
	}

	return nil
}

// ListFileRequestMultiError is an error wrapping multiple validation errors
// returned by ListFileRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileRequestMultiError) AllErrors() []error { return m }

// ListFileRequestValidationError is the validation error returned by
// ListFileRequest.Validate if the designated constraints aren't met.
type ListFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileRequestValidationError) ErrorName() string { return "ListFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileRequestValidationError{}

var _ListFileRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListFileRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

var _ListFileRequest_Status_InLookup = map[string]struct{}{
	"PROGRESS":  {},
	"COMPLETED": {},
}

// Validate checks the field values on ListFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFileReplyMultiError, or
// nil if none found.
func (m *ListFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFileReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFileReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFileReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFileReplyMultiError(errors)
	}

	return nil
}

// ListFileReplyMultiError is an error wrapping multiple validation errors
// returned by ListFileReply.ValidateAll() if the designated constraints
// aren't met.
type ListFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileReplyMultiError) AllErrors() []error { return m }

// ListFileReplyValidationError is the validation error returned by
// ListFileReply.Validate if the designated constraints aren't met.
type ListFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileReplyValidationError) ErrorName() string { return "ListFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileReplyValidationError{}

// Validate checks the field values on PrepareUploadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrepareUploadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareUploadFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareUploadFileRequestMultiError, or nil if none found.
func (m *PrepareUploadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareUploadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PrepareUploadFileRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() <= 0 {
		err := PrepareUploadFileRequestValidationError{
			field:  "Size",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSha()) < 1 {
		err := PrepareUploadFileRequestValidationError{
			field:  "Sha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.DirectoryId != nil {

		if m.GetDirectoryId() <= 0 {
			err := PrepareUploadFileRequestValidationError{
				field:  "DirectoryId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DirectoryPath != nil {

		if utf8.RuneCountInString(m.GetDirectoryPath()) < 1 {
			err := PrepareUploadFileRequestValidationError{
				field:  "DirectoryPath",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PrepareUploadFileRequestMultiError(errors)
	}

	return nil
}

// PrepareUploadFileRequestMultiError is an error wrapping multiple validation
// errors returned by PrepareUploadFileRequest.ValidateAll() if the designated
// constraints aren't met.
type PrepareUploadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareUploadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareUploadFileRequestMultiError) AllErrors() []error { return m }

// PrepareUploadFileRequestValidationError is the validation error returned by
// PrepareUploadFileRequest.Validate if the designated constraints aren't met.
type PrepareUploadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareUploadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareUploadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareUploadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareUploadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareUploadFileRequestValidationError) ErrorName() string {
	return "PrepareUploadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareUploadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareUploadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareUploadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareUploadFileRequestValidationError{}

// Validate checks the field values on PrepareUploadFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrepareUploadFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareUploadFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareUploadFileReplyMultiError, or nil if none found.
func (m *PrepareUploadFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareUploadFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uploaded

	if m.Src != nil {
		// no validation rules for Src
	}

	if m.ChunkSize != nil {
		// no validation rules for ChunkSize
	}

	if m.ChunkCount != nil {
		// no validation rules for ChunkCount
	}

	if m.UploadId != nil {
		// no validation rules for UploadId
	}

	if m.Sha != nil {
		// no validation rules for Sha
	}

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return PrepareUploadFileReplyMultiError(errors)
	}

	return nil
}

// PrepareUploadFileReplyMultiError is an error wrapping multiple validation
// errors returned by PrepareUploadFileReply.ValidateAll() if the designated
// constraints aren't met.
type PrepareUploadFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareUploadFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareUploadFileReplyMultiError) AllErrors() []error { return m }

// PrepareUploadFileReplyValidationError is the validation error returned by
// PrepareUploadFileReply.Validate if the designated constraints aren't met.
type PrepareUploadFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareUploadFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareUploadFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareUploadFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareUploadFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareUploadFileReplyValidationError) ErrorName() string {
	return "PrepareUploadFileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareUploadFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareUploadFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareUploadFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareUploadFileReplyValidationError{}

// Validate checks the field values on UploadFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileRequestMultiError, or nil if none found.
func (m *UploadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetData()) < 0 {
		err := UploadFileRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 0 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUploadId()) < 1 {
		err := UploadFileRequestValidationError{
			field:  "UploadId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIndex() <= 0 {
		err := UploadFileRequestValidationError{
			field:  "Index",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadFileRequestMultiError(errors)
	}

	return nil
}

// UploadFileRequestMultiError is an error wrapping multiple validation errors
// returned by UploadFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileRequestMultiError) AllErrors() []error { return m }

// UploadFileRequestValidationError is the validation error returned by
// UploadFileRequest.Validate if the designated constraints aren't met.
type UploadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileRequestValidationError) ErrorName() string {
	return "UploadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileRequestValidationError{}

// Validate checks the field values on UploadFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileReplyMultiError, or nil if none found.
func (m *UploadFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	// no validation rules for Sha

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadFileReplyMultiError(errors)
	}

	return nil
}

// UploadFileReplyMultiError is an error wrapping multiple validation errors
// returned by UploadFileReply.ValidateAll() if the designated constraints
// aren't met.
type UploadFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileReplyMultiError) AllErrors() []error { return m }

// UploadFileReplyValidationError is the validation error returned by
// UploadFileReply.Validate if the designated constraints aren't met.
type UploadFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileReplyValidationError) ErrorName() string { return "UploadFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e UploadFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileReplyValidationError{}

// Validate checks the field values on UpdateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileRequestMultiError, or nil if none found.
func (m *UpdateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateFileRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDirectoryId() <= 0 {
		err := UpdateFileRequestValidationError{
			field:  "DirectoryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateFileRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateFileRequestMultiError(errors)
	}

	return nil
}

// UpdateFileRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileRequestMultiError) AllErrors() []error { return m }

// UpdateFileRequestValidationError is the validation error returned by
// UpdateFileRequest.Validate if the designated constraints aren't met.
type UpdateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileRequestValidationError) ErrorName() string {
	return "UpdateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileRequestValidationError{}

// Validate checks the field values on UpdateFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileReplyMultiError, or nil if none found.
func (m *UpdateFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFileReplyMultiError(errors)
	}

	return nil
}

// UpdateFileReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateFileReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileReplyMultiError) AllErrors() []error { return m }

// UpdateFileReplyValidationError is the validation error returned by
// UpdateFileReply.Validate if the designated constraints aren't met.
type UpdateFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileReplyValidationError) ErrorName() string { return "UpdateFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileReplyValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteFileRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteFileRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteFileRequest_Ids_Unique[item]; exists {
			err := DeleteFileRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteFileRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileReplyMultiError, or nil if none found.
func (m *DeleteFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteFileReplyMultiError(errors)
	}

	return nil
}

// DeleteFileReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteFileReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileReplyMultiError) AllErrors() []error { return m }

// DeleteFileReplyValidationError is the validation error returned by
// DeleteFileReply.Validate if the designated constraints aren't met.
type DeleteFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileReplyValidationError) ErrorName() string { return "DeleteFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileReplyValidationError{}

// Validate checks the field values on ListFileReply_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFileReply_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileReply_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileReply_FileMultiError, or nil if none found.
func (m *ListFileReply_File) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileReply_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DirectoryId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Size

	// no validation rules for Sha

	// no validation rules for Src

	// no validation rules for Url

	// no validation rules for Status

	// no validation rules for UploadId

	// no validation rules for ChunkCount

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ListFileReply_FileMultiError(errors)
	}

	return nil
}

// ListFileReply_FileMultiError is an error wrapping multiple validation errors
// returned by ListFileReply_File.ValidateAll() if the designated constraints
// aren't met.
type ListFileReply_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileReply_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileReply_FileMultiError) AllErrors() []error { return m }

// ListFileReply_FileValidationError is the validation error returned by
// ListFileReply_File.Validate if the designated constraints aren't met.
type ListFileReply_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileReply_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileReply_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileReply_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileReply_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileReply_FileValidationError) ErrorName() string {
	return "ListFileReply_FileValidationError"
}

// Error satisfies the builtin error interface
func (e ListFileReply_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileReply_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileReply_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileReply_FileValidationError{}
