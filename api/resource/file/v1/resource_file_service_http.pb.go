// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/resource/file/resource_file_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFileDeleteFile = "/resource.api.resource.file.v1.File/DeleteFile"
const OperationFileGetFile = "/resource.api.resource.file.v1.File/GetFile"
const OperationFileListFile = "/resource.api.resource.file.v1.File/ListFile"
const OperationFilePrepareUploadFile = "/resource.api.resource.file.v1.File/PrepareUploadFile"
const OperationFileUpdateFile = "/resource.api.resource.file.v1.File/UpdateFile"

type FileHTTPServer interface {
	// DeleteFile DeleteFile 删除文件信息
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error)
	// GetFile GetFile 获取指定的文件信息
	GetFile(context.Context, *GetFileRequest) (*GetFileReply, error)
	// ListFile ListFile 获取文件信息列表
	ListFile(context.Context, *ListFileRequest) (*ListFileReply, error)
	// PrepareUploadFile PrepareUploadFile 预上传文件信息
	PrepareUploadFile(context.Context, *PrepareUploadFileRequest) (*PrepareUploadFileReply, error)
	// UpdateFile UpdateFile 更新文件信息
	UpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileReply, error)
}

func RegisterFileHTTPServer(s *http.Server, srv FileHTTPServer) {
	r := s.Route("/")
	r.GET("/resource/client/v1/file", _File_GetFile0_HTTP_Handler(srv))
	r.GET("/resource/api/v1/file", _File_GetFile1_HTTP_Handler(srv))
	r.GET("/resource/api/v1/files", _File_ListFile0_HTTP_Handler(srv))
	r.POST("/resource/client/v1/file/prepare_upload", _File_PrepareUploadFile0_HTTP_Handler(srv))
	r.POST("/resource/api/v1/file/prepare_upload", _File_PrepareUploadFile1_HTTP_Handler(srv))
	r.PUT("/resource/api/v1/file", _File_UpdateFile0_HTTP_Handler(srv))
	r.DELETE("/resource/api/v1/file", _File_DeleteFile0_HTTP_Handler(srv))
}

func _File_GetFile0_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileGetFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetFile(ctx, req.(*GetFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFileReply)
		return ctx.Result(200, reply)
	}
}

func _File_GetFile1_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileGetFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetFile(ctx, req.(*GetFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFileReply)
		return ctx.Result(200, reply)
	}
}

func _File_ListFile0_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileListFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListFile(ctx, req.(*ListFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFileReply)
		return ctx.Result(200, reply)
	}
}

func _File_PrepareUploadFile0_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PrepareUploadFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFilePrepareUploadFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PrepareUploadFile(ctx, req.(*PrepareUploadFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PrepareUploadFileReply)
		return ctx.Result(200, reply)
	}
}

func _File_PrepareUploadFile1_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PrepareUploadFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFilePrepareUploadFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PrepareUploadFile(ctx, req.(*PrepareUploadFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PrepareUploadFileReply)
		return ctx.Result(200, reply)
	}
}

func _File_UpdateFile0_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileUpdateFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateFile(ctx, req.(*UpdateFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFileReply)
		return ctx.Result(200, reply)
	}
}

func _File_DeleteFile0_HTTP_Handler(srv FileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileDeleteFile)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteFile(ctx, req.(*DeleteFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFileReply)
		return ctx.Result(200, reply)
	}
}

type FileHTTPClient interface {
	DeleteFile(ctx context.Context, req *DeleteFileRequest, opts ...http.CallOption) (rsp *DeleteFileReply, err error)
	GetFile(ctx context.Context, req *GetFileRequest, opts ...http.CallOption) (rsp *GetFileReply, err error)
	ListFile(ctx context.Context, req *ListFileRequest, opts ...http.CallOption) (rsp *ListFileReply, err error)
	PrepareUploadFile(ctx context.Context, req *PrepareUploadFileRequest, opts ...http.CallOption) (rsp *PrepareUploadFileReply, err error)
	UpdateFile(ctx context.Context, req *UpdateFileRequest, opts ...http.CallOption) (rsp *UpdateFileReply, err error)
}

type FileHTTPClientImpl struct {
	cc *http.Client
}

func NewFileHTTPClient(client *http.Client) FileHTTPClient {
	return &FileHTTPClientImpl{client}
}

func (c *FileHTTPClientImpl) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...http.CallOption) (*DeleteFileReply, error) {
	var out DeleteFileReply
	pattern := "/resource/api/v1/file"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileDeleteFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FileHTTPClientImpl) GetFile(ctx context.Context, in *GetFileRequest, opts ...http.CallOption) (*GetFileReply, error) {
	var out GetFileReply
	pattern := "/resource/api/v1/file"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileGetFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FileHTTPClientImpl) ListFile(ctx context.Context, in *ListFileRequest, opts ...http.CallOption) (*ListFileReply, error) {
	var out ListFileReply
	pattern := "/resource/api/v1/files"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileListFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FileHTTPClientImpl) PrepareUploadFile(ctx context.Context, in *PrepareUploadFileRequest, opts ...http.CallOption) (*PrepareUploadFileReply, error) {
	var out PrepareUploadFileReply
	pattern := "/resource/api/v1/file/prepare_upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFilePrepareUploadFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FileHTTPClientImpl) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...http.CallOption) (*UpdateFileReply, error) {
	var out UpdateFileReply
	pattern := "/resource/api/v1/file"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileUpdateFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
