// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: resource_export_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_PageExport_FullMethodName     = "/export.Service/PageExport"
	Service_AddExport_FullMethodName      = "/export.Service/AddExport"
	Service_AddExportExcel_FullMethodName = "/export.Service/AddExportExcel"
	Service_DeleteExport_FullMethodName   = "/export.Service/DeleteExport"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	PageExport(ctx context.Context, in *PageExportRequest, opts ...grpc.CallOption) (*PageExportReply, error)
	AddExport(ctx context.Context, in *AddExportRequest, opts ...grpc.CallOption) (*AddExportReply, error)
	AddExportExcel(ctx context.Context, in *AddExportExcelRequest, opts ...grpc.CallOption) (*AddExportExcelReply, error)
	DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) PageExport(ctx context.Context, in *PageExportRequest, opts ...grpc.CallOption) (*PageExportReply, error) {
	out := new(PageExportReply)
	err := c.cc.Invoke(ctx, Service_PageExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddExport(ctx context.Context, in *AddExportRequest, opts ...grpc.CallOption) (*AddExportReply, error) {
	out := new(AddExportReply)
	err := c.cc.Invoke(ctx, Service_AddExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddExportExcel(ctx context.Context, in *AddExportExcelRequest, opts ...grpc.CallOption) (*AddExportExcelReply, error) {
	out := new(AddExportExcelReply)
	err := c.cc.Invoke(ctx, Service_AddExportExcel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	PageExport(context.Context, *PageExportRequest) (*PageExportReply, error)
	AddExport(context.Context, *AddExportRequest) (*AddExportReply, error)
	AddExportExcel(context.Context, *AddExportExcelRequest) (*AddExportExcelReply, error)
	DeleteExport(context.Context, *DeleteExportRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) PageExport(context.Context, *PageExportRequest) (*PageExportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageExport not implemented")
}
func (UnimplementedServiceServer) AddExport(context.Context, *AddExportRequest) (*AddExportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExport not implemented")
}
func (UnimplementedServiceServer) AddExportExcel(context.Context, *AddExportExcelRequest) (*AddExportExcelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExportExcel not implemented")
}
func (UnimplementedServiceServer) DeleteExport(context.Context, *DeleteExportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExport not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_PageExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageExport(ctx, req.(*PageExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddExport(ctx, req.(*AddExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddExportExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExportExcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddExportExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddExportExcel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddExportExcel(ctx, req.(*AddExportExcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteExport(ctx, req.(*DeleteExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "export.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageExport",
			Handler:    _Service_PageExport_Handler,
		},
		{
			MethodName: "AddExport",
			Handler:    _Service_AddExport_Handler,
		},
		{
			MethodName: "AddExportExcel",
			Handler:    _Service_AddExportExcel_Handler,
		},
		{
			MethodName: "DeleteExport",
			Handler:    _Service_DeleteExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_export_service.proto",
}
