// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource_export.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Export with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Export) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Export with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExportMultiError, or nil if none found.
func (m *Export) ValidateAll() error {
	return m.validate(true)
}

func (m *Export) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Src

	// no validation rules for Version

	// no validation rules for Reason

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ExportMultiError(errors)
	}

	return nil
}

// ExportMultiError is an error wrapping multiple validation errors returned by
// Export.ValidateAll() if the designated constraints aren't met.
type ExportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportMultiError) AllErrors() []error { return m }

// ExportValidationError is the validation error returned by Export.Validate if
// the designated constraints aren't met.
type ExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportValidationError) ErrorName() string { return "ExportValidationError" }

// Error satisfies the builtin error interface
func (e ExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportValidationError{}

// Validate checks the field values on PageExportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageExportRequestMultiError, or nil if none found.
func (m *PageExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageExportRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := PageExportRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageExportRequestMultiError(errors)
	}

	return nil
}

// PageExportRequestMultiError is an error wrapping multiple validation errors
// returned by PageExportRequest.ValidateAll() if the designated constraints
// aren't met.
type PageExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageExportRequestMultiError) AllErrors() []error { return m }

// PageExportRequestValidationError is the validation error returned by
// PageExportRequest.Validate if the designated constraints aren't met.
type PageExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageExportRequestValidationError) ErrorName() string {
	return "PageExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageExportRequestValidationError{}

// Validate checks the field values on PageExportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageExportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageExportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageExportReplyMultiError, or nil if none found.
func (m *PageExportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageExportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageExportReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageExportReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageExportReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return PageExportReplyMultiError(errors)
	}

	return nil
}

// PageExportReplyMultiError is an error wrapping multiple validation errors
// returned by PageExportReply.ValidateAll() if the designated constraints
// aren't met.
type PageExportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageExportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageExportReplyMultiError) AllErrors() []error { return m }

// PageExportReplyValidationError is the validation error returned by
// PageExportReply.Validate if the designated constraints aren't met.
type PageExportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageExportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageExportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageExportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageExportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageExportReplyValidationError) ErrorName() string { return "PageExportReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageExportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageExportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageExportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageExportReplyValidationError{}

// Validate checks the field values on AddExportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExportRequestMultiError, or nil if none found.
func (m *AddExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddExportRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddExportRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddExportRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddExportRequestValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddExportRequestMultiError(errors)
	}

	return nil
}

// AddExportRequestMultiError is an error wrapping multiple validation errors
// returned by AddExportRequest.ValidateAll() if the designated constraints
// aren't met.
type AddExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportRequestMultiError) AllErrors() []error { return m }

// AddExportRequestValidationError is the validation error returned by
// AddExportRequest.Validate if the designated constraints aren't met.
type AddExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportRequestValidationError) ErrorName() string { return "AddExportRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportRequestValidationError{}

// Validate checks the field values on AddExportReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddExportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddExportReplyMultiError,
// or nil if none found.
func (m *AddExportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddExportReplyMultiError(errors)
	}

	return nil
}

// AddExportReplyMultiError is an error wrapping multiple validation errors
// returned by AddExportReply.ValidateAll() if the designated constraints
// aren't met.
type AddExportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportReplyMultiError) AllErrors() []error { return m }

// AddExportReplyValidationError is the validation error returned by
// AddExportReply.Validate if the designated constraints aren't met.
type AddExportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportReplyValidationError) ErrorName() string { return "AddExportReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddExportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportReplyValidationError{}

// Validate checks the field values on AddExportExcelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExportExcelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportExcelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExportExcelRequestMultiError, or nil if none found.
func (m *AddExportExcelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportExcelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddExportExcelRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRows()) < 1 {
		err := AddExportExcelRequestValidationError{
			field:  "Rows",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddExportExcelRequestValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddExportExcelRequestValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddExportExcelRequestValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddExportExcelRequestMultiError(errors)
	}

	return nil
}

// AddExportExcelRequestMultiError is an error wrapping multiple validation
// errors returned by AddExportExcelRequest.ValidateAll() if the designated
// constraints aren't met.
type AddExportExcelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportExcelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportExcelRequestMultiError) AllErrors() []error { return m }

// AddExportExcelRequestValidationError is the validation error returned by
// AddExportExcelRequest.Validate if the designated constraints aren't met.
type AddExportExcelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportExcelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportExcelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportExcelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportExcelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportExcelRequestValidationError) ErrorName() string {
	return "AddExportExcelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddExportExcelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportExcelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportExcelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportExcelRequestValidationError{}

// Validate checks the field values on AddExportExcelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExportExcelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportExcelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExportExcelReplyMultiError, or nil if none found.
func (m *AddExportExcelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportExcelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddExportExcelReplyMultiError(errors)
	}

	return nil
}

// AddExportExcelReplyMultiError is an error wrapping multiple validation
// errors returned by AddExportExcelReply.ValidateAll() if the designated
// constraints aren't met.
type AddExportExcelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportExcelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportExcelReplyMultiError) AllErrors() []error { return m }

// AddExportExcelReplyValidationError is the validation error returned by
// AddExportExcelReply.Validate if the designated constraints aren't met.
type AddExportExcelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportExcelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportExcelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportExcelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportExcelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportExcelReplyValidationError) ErrorName() string {
	return "AddExportExcelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddExportExcelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportExcelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportExcelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportExcelReplyValidationError{}

// Validate checks the field values on DeleteExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExportRequestMultiError, or nil if none found.
func (m *DeleteExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteExportRequestMultiError(errors)
	}

	return nil
}

// DeleteExportRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteExportRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExportRequestMultiError) AllErrors() []error { return m }

// DeleteExportRequestValidationError is the validation error returned by
// DeleteExportRequest.Validate if the designated constraints aren't met.
type DeleteExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExportRequestValidationError) ErrorName() string {
	return "DeleteExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExportRequestValidationError{}

// Validate checks the field values on AddExportRequest_ExportFile with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExportRequest_ExportFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportRequest_ExportFile with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExportRequest_ExportFileMultiError, or nil if none found.
func (m *AddExportRequest_ExportFile) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportRequest_ExportFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha

	// no validation rules for Rename

	if len(errors) > 0 {
		return AddExportRequest_ExportFileMultiError(errors)
	}

	return nil
}

// AddExportRequest_ExportFileMultiError is an error wrapping multiple
// validation errors returned by AddExportRequest_ExportFile.ValidateAll() if
// the designated constraints aren't met.
type AddExportRequest_ExportFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportRequest_ExportFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportRequest_ExportFileMultiError) AllErrors() []error { return m }

// AddExportRequest_ExportFileValidationError is the validation error returned
// by AddExportRequest_ExportFile.Validate if the designated constraints
// aren't met.
type AddExportRequest_ExportFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportRequest_ExportFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportRequest_ExportFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportRequest_ExportFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportRequest_ExportFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportRequest_ExportFileValidationError) ErrorName() string {
	return "AddExportRequest_ExportFileValidationError"
}

// Error satisfies the builtin error interface
func (e AddExportRequest_ExportFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportRequest_ExportFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportRequest_ExportFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportRequest_ExportFileValidationError{}

// Validate checks the field values on AddExportExcelRequest_Col with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExportExcelRequest_Col) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportExcelRequest_Col with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExportExcelRequest_ColMultiError, or nil if none found.
func (m *AddExportExcelRequest_Col) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportExcelRequest_Col) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := AddExportExcelRequest_ColValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := AddExportExcelRequest_ColValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddExportExcelRequest_ColMultiError(errors)
	}

	return nil
}

// AddExportExcelRequest_ColMultiError is an error wrapping multiple validation
// errors returned by AddExportExcelRequest_Col.ValidateAll() if the
// designated constraints aren't met.
type AddExportExcelRequest_ColMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportExcelRequest_ColMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportExcelRequest_ColMultiError) AllErrors() []error { return m }

// AddExportExcelRequest_ColValidationError is the validation error returned by
// AddExportExcelRequest_Col.Validate if the designated constraints aren't met.
type AddExportExcelRequest_ColValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportExcelRequest_ColValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportExcelRequest_ColValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportExcelRequest_ColValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportExcelRequest_ColValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportExcelRequest_ColValidationError) ErrorName() string {
	return "AddExportExcelRequest_ColValidationError"
}

// Error satisfies the builtin error interface
func (e AddExportExcelRequest_ColValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportExcelRequest_Col.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportExcelRequest_ColValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportExcelRequest_ColValidationError{}

// Validate checks the field values on AddExportExcelRequest_Row with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExportExcelRequest_Row) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExportExcelRequest_Row with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExportExcelRequest_RowMultiError, or nil if none found.
func (m *AddExportExcelRequest_Row) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExportExcelRequest_Row) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddExportExcelRequest_RowValidationError{
						field:  fmt.Sprintf("Cols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddExportExcelRequest_RowValidationError{
						field:  fmt.Sprintf("Cols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddExportExcelRequest_RowValidationError{
					field:  fmt.Sprintf("Cols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddExportExcelRequest_RowMultiError(errors)
	}

	return nil
}

// AddExportExcelRequest_RowMultiError is an error wrapping multiple validation
// errors returned by AddExportExcelRequest_Row.ValidateAll() if the
// designated constraints aren't met.
type AddExportExcelRequest_RowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExportExcelRequest_RowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExportExcelRequest_RowMultiError) AllErrors() []error { return m }

// AddExportExcelRequest_RowValidationError is the validation error returned by
// AddExportExcelRequest_Row.Validate if the designated constraints aren't met.
type AddExportExcelRequest_RowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExportExcelRequest_RowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExportExcelRequest_RowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExportExcelRequest_RowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExportExcelRequest_RowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExportExcelRequest_RowValidationError) ErrorName() string {
	return "AddExportExcelRequest_RowValidationError"
}

// Error satisfies the builtin error interface
func (e AddExportExcelRequest_RowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExportExcelRequest_Row.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExportExcelRequest_RowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExportExcelRequest_RowValidationError{}
