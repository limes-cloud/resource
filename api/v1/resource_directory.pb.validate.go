// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource_directory.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Directory with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Directory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Directory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DirectoryMultiError, or nil
// if none found.
func (m *Directory) ValidateAll() error {
	return m.validate(true)
}

func (m *Directory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for App

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if len(errors) > 0 {
		return DirectoryMultiError(errors)
	}

	return nil
}

// DirectoryMultiError is an error wrapping multiple validation errors returned
// by Directory.ValidateAll() if the designated constraints aren't met.
type DirectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DirectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DirectoryMultiError) AllErrors() []error { return m }

// DirectoryValidationError is the validation error returned by
// Directory.Validate if the designated constraints aren't met.
type DirectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DirectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DirectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DirectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DirectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DirectoryValidationError) ErrorName() string { return "DirectoryValidationError" }

// Error satisfies the builtin error interface
func (e DirectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDirectory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DirectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DirectoryValidationError{}

// Validate checks the field values on GetDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDirectoryRequestMultiError, or nil if none found.
func (m *GetDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if utf8.RuneCountInString(m.GetApp()) < 0 {
		err := GetDirectoryRequestValidationError{
			field:  "App",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDirectoryRequestMultiError(errors)
	}

	return nil
}

// GetDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirectoryRequestMultiError) AllErrors() []error { return m }

// GetDirectoryRequestValidationError is the validation error returned by
// GetDirectoryRequest.Validate if the designated constraints aren't met.
type GetDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirectoryRequestValidationError) ErrorName() string {
	return "GetDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirectoryRequestValidationError{}

// Validate checks the field values on GetDirectoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDirectoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirectoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDirectoryReplyMultiError, or nil if none found.
func (m *GetDirectoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirectoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDirectoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDirectoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDirectoryReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDirectoryReplyMultiError(errors)
	}

	return nil
}

// GetDirectoryReplyMultiError is an error wrapping multiple validation errors
// returned by GetDirectoryReply.ValidateAll() if the designated constraints
// aren't met.
type GetDirectoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirectoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirectoryReplyMultiError) AllErrors() []error { return m }

// GetDirectoryReplyValidationError is the validation error returned by
// GetDirectoryReply.Validate if the designated constraints aren't met.
type GetDirectoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirectoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirectoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirectoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirectoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirectoryReplyValidationError) ErrorName() string {
	return "GetDirectoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDirectoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirectoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirectoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirectoryReplyValidationError{}

// Validate checks the field values on AddDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDirectoryRequestMultiError, or nil if none found.
func (m *AddDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddDirectoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := AddDirectoryRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddDirectoryRequestMultiError(errors)
	}

	return nil
}

// AddDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by AddDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type AddDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDirectoryRequestMultiError) AllErrors() []error { return m }

// AddDirectoryRequestValidationError is the validation error returned by
// AddDirectoryRequest.Validate if the designated constraints aren't met.
type AddDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDirectoryRequestValidationError) ErrorName() string {
	return "AddDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDirectoryRequestValidationError{}

// Validate checks the field values on UpdateDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDirectoryRequestMultiError, or nil if none found.
func (m *UpdateDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDirectoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := UpdateDirectoryRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDirectoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDirectoryRequestMultiError(errors)
	}

	return nil
}

// UpdateDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDirectoryRequestMultiError) AllErrors() []error { return m }

// UpdateDirectoryRequestValidationError is the validation error returned by
// UpdateDirectoryRequest.Validate if the designated constraints aren't met.
type UpdateDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDirectoryRequestValidationError) ErrorName() string {
	return "UpdateDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDirectoryRequestValidationError{}

// Validate checks the field values on DeleteDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDirectoryRequestMultiError, or nil if none found.
func (m *DeleteDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDirectoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := DeleteDirectoryRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDirectoryRequestMultiError(errors)
	}

	return nil
}

// DeleteDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDirectoryRequestMultiError) AllErrors() []error { return m }

// DeleteDirectoryRequestValidationError is the validation error returned by
// DeleteDirectoryRequest.Validate if the designated constraints aren't met.
type DeleteDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDirectoryRequestValidationError) ErrorName() string {
	return "DeleteDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDirectoryRequestValidationError{}
