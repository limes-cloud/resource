// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsNotFoundError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFoundError.String() && e.Code == 200
}

func NotFoundErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotFoundError.String(), "不存在数据:"+fmt.Sprintf(format, args...))
}

func NotFoundError() *errors.Error {
	return errors.New(200, ErrorReason_NotFoundError.String(), "不存在数据")
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TransformError.String() && e.Code == 200
}

func TransformErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_TransformError.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func TransformError() *errors.Error {
	return errors.New(200, ErrorReason_TransformError.String(), "数据转换失败")
}

func IsNoSupportStoreError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NoSupportStoreError.String() && e.Code == 200
}

func NoSupportStoreErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NoSupportStoreError.String(), "不支持的存储引擎:"+fmt.Sprintf(format, args...))
}

func NoSupportStoreError() *errors.Error {
	return errors.New(200, ErrorReason_NoSupportStoreError.String(), "不支持的存储引擎")
}

func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SystemError.String() && e.Code == 200
}

func SystemErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_SystemError.String(), "系统错误:"+fmt.Sprintf(format, args...))
}

func SystemError() *errors.Error {
	return errors.New(200, ErrorReason_SystemError.String(), "系统错误")
}

func IsChunkUploadError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ChunkUploadError.String() && e.Code == 200
}

func ChunkUploadErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ChunkUploadError.String(), "分片上传失败:"+fmt.Sprintf(format, args...))
}

func ChunkUploadError() *errors.Error {
	return errors.New(200, ErrorReason_ChunkUploadError.String(), "分片上传失败")
}

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DatabaseError.String() && e.Code == 200
}

func DatabaseErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DatabaseError.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func DatabaseError() *errors.Error {
	return errors.New(200, ErrorReason_DatabaseError.String(), "数据库错误")
}

func IsStatusProgressError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_StatusProgressError.String() && e.Code == 200
}

func StatusProgressErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_StatusProgressError.String(), "文件上传中:"+fmt.Sprintf(format, args...))
}

func StatusProgressError() *errors.Error {
	return errors.New(200, ErrorReason_StatusProgressError.String(), "文件上传中")
}

func IsUploadFileError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UploadFileError.String() && e.Code == 200
}

func UploadFileErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UploadFileError.String(), "文件上传失败:"+fmt.Sprintf(format, args...))
}

func UploadFileError() *errors.Error {
	return errors.New(200, ErrorReason_UploadFileError.String(), "文件上传失败")
}

func IsInitStoreError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InitStoreError.String() && e.Code == 200
}

func InitStoreErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_InitStoreError.String(), "存储引擎初始化失败:"+fmt.Sprintf(format, args...))
}

func InitStoreError() *errors.Error {
	return errors.New(200, ErrorReason_InitStoreError.String(), "存储引擎初始化失败")
}

func IsFileFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FileFormatError.String() && e.Code == 200
}

func FileFormatErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_FileFormatError.String(), "文件格式错误:"+fmt.Sprintf(format, args...))
}

func FileFormatError() *errors.Error {
	return errors.New(200, ErrorReason_FileFormatError.String(), "文件格式错误")
}

func IsAddDirectoryError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AddDirectoryError.String() && e.Code == 200
}

func AddDirectoryErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_AddDirectoryError.String(), "目录创建失败:"+fmt.Sprintf(format, args...))
}

func AddDirectoryError() *errors.Error {
	return errors.New(200, ErrorReason_AddDirectoryError.String(), "目录创建失败")
}

func IsUpdateDirectoryError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UpdateDirectoryError.String() && e.Code == 200
}

func UpdateDirectoryErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UpdateDirectoryError.String(), "目录更新失败:"+fmt.Sprintf(format, args...))
}

func UpdateDirectoryError() *errors.Error {
	return errors.New(200, ErrorReason_UpdateDirectoryError.String(), "目录更新失败")
}

func IsDeleteDirectoryError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteDirectoryError.String() && e.Code == 200
}

func DeleteDirectoryErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DeleteDirectoryError.String(), "目录删除失败:"+fmt.Sprintf(format, args...))
}

func DeleteDirectoryError() *errors.Error {
	return errors.New(200, ErrorReason_DeleteDirectoryError.String(), "目录删除失败")
}

func IsNotExistFileError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistFileError.String() && e.Code == 200
}

func NotExistFileErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotExistFileError.String(), "文件不存在:"+fmt.Sprintf(format, args...))
}

func NotExistFileError() *errors.Error {
	return errors.New(200, ErrorReason_NotExistFileError.String(), "文件不存在")
}

func IsAlreadyExistFileNameError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistFileNameError.String() && e.Code == 200
}

func AlreadyExistFileNameErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistFileNameError.String(), "文件名已存在:"+fmt.Sprintf(format, args...))
}

func AlreadyExistFileNameError() *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistFileNameError.String(), "文件名已存在")
}

func IsNotExistDirectoryError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistDirectoryError.String() && e.Code == 200
}

func NotExistDirectoryErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotExistDirectoryError.String(), "文件夹不存在:"+fmt.Sprintf(format, args...))
}

func NotExistDirectoryError() *errors.Error {
	return errors.New(200, ErrorReason_NotExistDirectoryError.String(), "文件夹不存在")
}

func IsNotExistResourceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistResourceError.String() && e.Code == 200
}

func NotExistResourceErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotExistResourceError.String(), "资源不存在:"+fmt.Sprintf(format, args...))
}

func NotExistResourceError() *errors.Error {
	return errors.New(200, ErrorReason_NotExistResourceError.String(), "资源不存在")
}

func IsParamsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParamsError.String() && e.Code == 200
}

func ParamsErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ParamsError.String(), "参数错误:"+fmt.Sprintf(format, args...))
}

func ParamsError() *errors.Error {
	return errors.New(200, ErrorReason_ParamsError.String(), "参数错误")
}
